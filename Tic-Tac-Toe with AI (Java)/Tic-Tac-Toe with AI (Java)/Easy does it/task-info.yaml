type: edu
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;
    import java.util.Scanner;

    public class Main extends GameCore {
        public static void main(String[] args) {
            Main main = new Main();
            Scanner sc = new Scanner(System.in);
            System.out.print("Enter the cells: ");
            main.drawingField(sc.nextLine());
            GameCore.printField(main.getField());
            main.testingAndSettingSymbols(main.getField(), sc);
        }
    }
  learner_created: false
- name: src/tictactoe/GameCore.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    abstract public class GameCore {
        char[][] Field = new char[3][3];
        int cross;
        int oes;

        public int getCross() {
            return cross;
        }

        public int getOes() {
            return oes;
        }

        public void setCross(int cross) {
            this.cross = cross;
        }

        public void setOes(int oes) {
            this.oes = oes;
        }

        public char[][] getField() {
            return Field;
        }

        public void setField(char[][] Field) {
            this.Field = Field;
        }

        public void drawingField(String input) {
            int index = 0;
            char[][] array = getField();

            for (int i = 0; i < array.length; i++) {
                String symbols = input.substring(index, index + 3);
                for (int k = 0; k < array[i].length; k++) {
                    if (symbols.charAt(k) == 'X') {
                        array[i][k] = symbols.charAt(k);
                        setCross(getCross() + 1);
                    } else if (symbols.charAt(k) == 'O') {
                        array[i][k] = symbols.charAt(k);
                        setOes(getOes() + 1);
                    } else {
                        array[i][k] = ' ';
                    }
                }
                index += 3;
            }
            setField(array);
        }

        @SuppressWarnings("ForLoopReplaceableByForEach")
        public static void printField(char[][] chars) {
            System.out.print("---------");
            for (int i = 0; i < chars.length; i++) {
                System.out.println();
                for (int k = 0; k < chars[i].length; k++) {
                    if (k == 0) {
                        System.out.print("| ");
                    }
                    System.out.print(chars[i][k] + " ");
                    if (k == 2) {
                        System.out.print("|");
                    }
                }
            }
            System.out.println('\n' + "---------");
        }

        @SuppressWarnings("unused")
        public void testingAndSettingSymbols(char[][] gameField, Scanner scanner) {
            boolean validInput = false;
            int cordColumn = 0;
            int cordRow = 0;
            String regexForDigits = "\\d\\s\\d";
            String regexForRange = "[1-3]\\s[1-3]";

            while (!validInput) {
                System.out.print("Enter the coordinates: ");
                String input = scanner.nextLine();

                if (!input.matches(regexForDigits)) {
                    System.out.println("You should enter numbers!");

                } else if (!input.matches(regexForRange)) {
                    System.out.println("Coordinates should be from 1 to 3!");

                } else if (input.matches(regexForDigits) && input.matches(regexForRange)) {
                    String[] cordArr = input.split(" ");

                    cordRow = Integer.parseInt(cordArr[0]);
                    cordColumn = Integer.parseInt(cordArr[1]);

                    if (gameField[cordRow - 1][cordColumn - 1] == 'X' ^ gameField[cordRow - 1][cordColumn - 1] == 'O') {
                        System.out.println("This cell is occupied! Choose another one!");
                    } else {
                        validInput = true;
                    }
                }
            }

            if (getOes() >= getCross()) {
                gameField[cordRow - 1][cordColumn - 1] = 'X';
                setField(gameField);
                setCross(getCross() + 1);
                char testingX = 'X';
                if (gameState(getField(), cordRow, cordColumn, testingX)) {
                    printField(getField());
                    System.out.println("X wins");

                } else if (fullnessTest(getField())) {
                    printField(getField());
                    System.out.println("Draw");

                } else {
                    printField(getField());
                    System.out.println("Game not finished");
                }

            } else {
                gameField[cordRow - 1][cordColumn - 1] = 'O';
                setField(gameField);
                setOes(getOes() + 1);
                char testingO = 'O';
                if (gameState(getField(), cordRow, cordColumn, testingO)) {
                    printField(getField());
                    System.out.println("O wins");

                } else if (fullnessTest(getField())) {
                    printField(getField());
                    System.out.println("Draw");

                } else {
                    printField(getField());
                    System.out.println("Game not finished");
                }
            }
        }

        public static boolean gameState(char[][] chars, int cordRow, int cordColumn, char testingChar) {
            int actCordRow = cordRow - 1;
            int actCordColumn = cordColumn - 1;
            boolean win = false;

            if (actCordRow == actCordColumn && actCordRow != 1) {
                if (horizontalTest(chars, actCordRow, testingChar) || verticalTest(chars, actCordColumn, testingChar) ||
                        leftToRightDiagonalTest(chars, testingChar)) {
                    win = true;
                }
            } else if (actCordColumn != actCordRow && actCordColumn != 1 && actCordRow != 1) {
                if (horizontalTest(chars, actCordRow, testingChar) || verticalTest(chars, actCordColumn, testingChar) ||
                        rightToLeftDiagonalTest(chars, testingChar)) {
                    win = true;
                }
            } else if (actCordRow == 1 && actCordColumn == 1) {
                if (horizontalTest(chars, actCordRow, testingChar) || verticalTest(chars, actCordColumn, testingChar) ||
                        rightToLeftDiagonalTest(chars, testingChar) || leftToRightDiagonalTest(chars, testingChar)) {
                    win = true;
                }
            } else {
                if (horizontalTest(chars, actCordRow, testingChar) || verticalTest(chars, actCordColumn, testingChar)) {
                    win = true;
                }
            }
            return win;
        }

        public static boolean fullnessTest(char[][] chars) {
            boolean full = false;
            boolean endOfCycle = true;
            for (int i = 0; i < chars.length && endOfCycle; i++) {
                for (int k = 0; k < chars[i].length; k++) {
                    if (chars[i][k] == 'X' ^ chars[i][k] == 'O') {
                        full = true;
                    } else {
                        full = false;
                        endOfCycle = false;
                        break;
                    }
                }
            }
            return full;
        }

        public static boolean horizontalTest(char[][] chars, int actCordRow, char testingChar) {
            boolean win = false;
            for (int i = 0; i < chars.length; i++) {
                if (chars[actCordRow][i] != testingChar) {
                    win = false;
                    break;
                } else {
                    win = true;
                }
            }
            return win;
        }

        @SuppressWarnings("ForLoopReplaceableByForEach")
        public static boolean verticalTest(char[][] chars, int actCordColum, char testingChar) {
            boolean win = false;
            for (int i = 0; i < chars.length; i++) {
                if (chars[i][actCordColum] != testingChar) {
                    win = false;
                    break;
                } else {
                    win = true;
                }
            }
            return win;
        }

        public static boolean leftToRightDiagonalTest(char[][] chars, char testingChar) {
            boolean win = false;
            for (int i = 0; i < chars.length; i++) {
                if (chars[i][i] != testingChar) {
                    win = false;
                    break;
                } else {
                    win = true;
                }
            }
            return win;
        }

        @SuppressWarnings("ForLoopReplaceableByForEach")
        public static boolean rightToLeftDiagonalTest(char[][] chars, char testingChar) {
            boolean win = false;
            int index = chars.length - 1;
            for (int i = 0; i < chars.length; i++) {
                if (chars[i][index--] != testingChar) {
                    win = false;
                    break;
                } else {
                    win = true;
                }
            }
            return win;
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            String output = program.start();

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }



            if (!output.toLowerCase().replace("'", "\"") .contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Bot.java
  visible: true
  learner_created: true
- name: src/tictactoe/Player.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7435#comment
status: Solved
record: 1
