package tictactoe;
import java.util.Scanner;

public class Main extends GameCore {
    public static void main(String[] args) {
        Main main = new Main();
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the cells: ");
        main.drawingField(sc.nextLine());
        GameCore.printField(main.getField());
        main.testingAndSettingSymbols(main.getField(), sc);
    }
}


package tictactoe;

import java.util.Scanner;

abstract public class GameCore {
    char[][] Field = new char[3][3];
    int cross;
    int oes;

    public int getCross() {
        return cross;
    }

    public int getOes() {
        return oes;
    }

    public void setCross(int cross) {
        this.cross = cross;
    }

    public void setOes(int oes) {
        this.oes = oes;
    }

    public char[][] getField() {
        return Field;
    }

    public void setField(char[][] Field) {
        this.Field = Field;
    }

    public void drawingField(String input) {
        int index = 0;
        char[][] array = getField();

        for (int i = 0; i < array.length; i++) {
            String symbols = input.substring(index, index + 3);
            for (int k = 0; k < array[i].length; k++) {
                if (symbols.charAt(k) == 'X') {
                    array[i][k] = symbols.charAt(k);
                    setCross(getCross() + 1);
                } else if (symbols.charAt(k) == 'O') {
                    array[i][k] = symbols.charAt(k);
                    setOes(getOes() + 1);
                } else {
                    array[i][k] = ' ';
                }
            }
            index += 3;
        }
        setField(array);
    }

    @SuppressWarnings("ForLoopReplaceableByForEach")
    public static void printField(char[][] chars) {
        System.out.print("---------");
        for (int i = 0; i < chars.length; i++) {
            System.out.println();
            for (int k = 0; k < chars[i].length; k++) {
                if (k == 0) {
                    System.out.print("| ");
                }
                System.out.print(chars[i][k] + " ");
                if (k == 2) {
                    System.out.print("|");
                }
            }
        }
        System.out.println('\n' + "---------");
    }

    @SuppressWarnings("unused")
    public void testingAndSettingSymbols(char[][] gameField, Scanner scanner) {
        boolean validInput = false;
        int cordColumn = 0;
        int cordRow = 0;
        String regexForDigits = "\\d\\s\\d";
        String regexForRange = "[1-3]\\s[1-3]";

        while (!validInput) {
            System.out.print("Enter the coordinates: ");
            String input = scanner.nextLine();

            if (!input.matches(regexForDigits)) {
                System.out.println("You should enter numbers!");

            } else if (!input.matches(regexForRange)) {
                System.out.println("Coordinates should be from 1 to 3!");

            } else if (input.matches(regexForDigits) && input.matches(regexForRange)) {
                String[] cordArr = input.split(" ");

                cordRow = Integer.parseInt(cordArr[0]);
                cordColumn = Integer.parseInt(cordArr[1]);

                if (gameField[cordRow - 1][cordColumn - 1] == 'X' ^ gameField[cordRow - 1][cordColumn - 1] == 'O') {
                    System.out.println("This cell is occupied! Choose another one!");
                } else {
                    validInput = true;
                }
            }
        }

        if (getOes() >= getCross()) {
            gameField[cordRow - 1][cordColumn - 1] = 'X';
            setField(gameField);
            setCross(getCross() + 1);
            char testingX = 'X';
            if (gameState(getField(), cordRow, cordColumn, testingX)) {
                printField(getField());
                System.out.println("X wins");

            } else if (fullnessTest(getField())) {
                printField(getField());
                System.out.println("Draw");

            } else {
                printField(getField());
                System.out.println("Game not finished");
            }

        } else {
            gameField[cordRow - 1][cordColumn - 1] = 'O';
            setField(gameField);
            setOes(getOes() + 1);
            char testingO = 'O';
            if (gameState(getField(), cordRow, cordColumn, testingO)) {
                printField(getField());
                System.out.println("O wins");

            } else if (fullnessTest(getField())) {
                printField(getField());
                System.out.println("Draw");

            } else {
                printField(getField());
                System.out.println("Game not finished");
            }
        }
    }

    public static boolean gameState(char[][] chars, int cordRow, int cordColumn, char testingChar) {
        int actCordRow = cordRow - 1;
        int actCordColumn = cordColumn - 1;
        boolean win = false;

        if (actCordRow == actCordColumn && actCordRow != 1) {
            if (horizontalTest(chars, actCordRow, testingChar) || verticalTest(chars, actCordColumn, testingChar) ||
                    leftToRightDiagonalTest(chars, testingChar)) {
                win = true;
            }
        } else if (actCordColumn != actCordRow && actCordColumn != 1 && actCordRow != 1) {
            if (horizontalTest(chars, actCordRow, testingChar) || verticalTest(chars, actCordColumn, testingChar) ||
                    rightToLeftDiagonalTest(chars, testingChar)) {
                win = true;
            }
        } else if (actCordRow == 1 && actCordColumn == 1) {
            if (horizontalTest(chars, actCordRow, testingChar) || verticalTest(chars, actCordColumn, testingChar) ||
                    rightToLeftDiagonalTest(chars, testingChar) || leftToRightDiagonalTest(chars, testingChar)) {
                win = true;
            }
        } else {
            if (horizontalTest(chars, actCordRow, testingChar) || verticalTest(chars, actCordColumn, testingChar)) {
                win = true;
            }
        }
        return win;
    }

    public static boolean fullnessTest(char[][] chars) {
        boolean full = false;
        boolean endOfCycle = true;
        for (int i = 0; i < chars.length && endOfCycle; i++) {
            for (int k = 0; k < chars[i].length; k++) {
                if (chars[i][k] == 'X' ^ chars[i][k] == 'O') {
                    full = true;
                } else {
                    full = false;
                    endOfCycle = false;
                    break;
                }
            }
        }
        return full;
    }

    public static boolean horizontalTest(char[][] chars, int actCordRow, char testingChar) {
        boolean win = false;
        for (int i = 0; i < chars.length; i++) {
            if (chars[actCordRow][i] != testingChar) {
                win = false;
                break;
            } else {
                win = true;
            }
        }
        return win;
    }

    @SuppressWarnings("ForLoopReplaceableByForEach")
    public static boolean verticalTest(char[][] chars, int actCordColum, char testingChar) {
        boolean win = false;
        for (int i = 0; i < chars.length; i++) {
            if (chars[i][actCordColum] != testingChar) {
                win = false;
                break;
            } else {
                win = true;
            }
        }
        return win;
    }

    public static boolean leftToRightDiagonalTest(char[][] chars, char testingChar) {
        boolean win = false;
        for (int i = 0; i < chars.length; i++) {
            if (chars[i][i] != testingChar) {
                win = false;
                break;
            } else {
                win = true;
            }
        }
        return win;
    }

    @SuppressWarnings("ForLoopReplaceableByForEach")
    public static boolean rightToLeftDiagonalTest(char[][] chars, char testingChar) {
        boolean win = false;
        int index = chars.length - 1;
        for (int i = 0; i < chars.length; i++) {
            if (chars[i][index--] != testingChar) {
                win = false;
                break;
            } else {
                win = true;
            }
        }
        return win;
    }
}